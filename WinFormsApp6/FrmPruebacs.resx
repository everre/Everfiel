<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        wjipxs/sAIsTqcRmcx7nkimYG6RMsGg3P5Qa0N04C/bpOkQaLbjAzXUFRSi2aRnxd9BnaQ9lzyGZrVpd
        3uwgocNko6hzZDOXunDb5fjGNjLWnQnqtGvaSpuiDn6p3BVXTER1MPQX6rnZ+kt3sDct/neSmFbufiGG
        Gip5B0zpY5JZpAeu5mZp6rb2Aa9+VuvHU6kq0UQavBMFZTUkdICXMjiEZJ0LhaxPdfU+1abd7sHDhMb2
        xvdJJIQZJHAAkNvlaAOAFyedyT3AS1EEe2n2JocQLXVUAe9os14c5j7cbFzCCRqdDe1ytjgeCU9HEIaa
        JsUY5N5nhdzjq46DUknRbBEEN3g7MVWJdFTsnbBRamrtcyyWIysAta3HieNjY2AW/wBncAp6GFsFNGGM
        Gp5uc7m5zuLibcT3DgAtmiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiIC
        IiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiIC
        IiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiIC
        IiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiIP/9k=
</value>
  </data>
</root>